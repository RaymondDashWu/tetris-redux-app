{"version":3,"sources":["actions/index.js","utils/index.js","reducers/game-reducer.js","reducers/index.js","components/grid-square.js","components/grid-board.js","components/next-block.js","components/score-board.js","components/controls.js","components/message-popup.js","App.js","serviceWorker.js","index.js"],"names":["moveRight","type","moveLeft","rotate","moveDown","pause","resume","restart","gridDefault","array","row","push","col","randomShape","min","max","shapes","length","Math","floor","random","defaultState","grid","shape","rotation","x","y","nextShape","isRunning","score","speed","gameOver","nextRotation","canMoveTo","currentShape","proposedX","proposedY","possibleRow","undefined","addBlockToGrid","blockOffGrid","block","newGrid","console","log","checkRows","completedRows","indexOf","splice","unshift","Array","fill","gameReducer","state","action","newRotation","maybeY","obj","newState","reducers","combineReducers","game","GridSquare","classes","this","props","color","className","Component","GridBoard","lastUpdateTime","progressTime","window","requestAnimationFrame","update","bind","time","deltaTime","blockColor","map","rowArray","square","blockX","blockY","k","key","makeGrid","connect","NextBlock","ScoreBoard","onClick","e","Controls","MessagePopup","message","isHidden","store","createStore","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0TAeaA,EAAY,WACvB,MAAO,CAAEC,KAbe,eAgBbC,EAAW,WACtB,MAAO,CAAED,KAlBe,cAqBbE,EAAS,WACpB,MAAO,CAAEF,KApBe,WAuBbG,EAAW,WACtB,MAAO,CAAEH,KAvBe,cA0BbI,EAAQ,WACnB,MAAO,CAAEJ,KAhCe,UAmCbK,EAAS,WACpB,MAAO,CAAEL,KAnCe,WAsCbM,EAAU,WACrB,MAAO,CAAEN,KAhCe,Y,QCDbO,EAAc,WAIzB,IAHA,IAEMC,EAAQ,GACLC,EAAM,EAAGA,EAHL,GAGiBA,IAAO,CACnCD,EAAME,KAAK,IACX,IAAK,IAAIC,EAAM,EAAGA,EAJP,GAImBA,IAC5BH,EAAMC,GAAKC,KAAK,GAGpB,OAAOF,GAIII,EAAc,WACzB,OApBqBC,EAoBP,EApBYC,EAoBTC,EAAOC,OAAS,EAnB1BC,KAAKC,MAAMD,KAAKE,UAAYL,EAAMD,EAAM,IAAMA,EADjC,IAACA,EAAKC,GAwBfM,EAAe,WAC1B,MAAO,CACLC,KAAMd,IACNe,MAAOV,IACPW,SAAU,EACVC,EAAG,EACHC,GAAI,EACJC,UAAWd,IACXe,WAAW,EACXC,MAAO,EACPC,MAAO,IACPC,UAAU,IAKDC,EAAe,SAACT,EAAOC,GAClC,OAAQA,EAAW,GAAKR,EAAOO,GAAON,QAG3BgB,EAAY,SAACV,EAAOD,EAAMG,EAAGC,EAAGF,GAG3C,IAFA,IAAMU,EAAelB,EAAOO,GAAOC,GAE1Bd,EAAM,EAAGA,EAAMwB,EAAajB,OAAQP,IAC3C,IAAK,IAAIE,EAAM,EAAGA,EAAMsB,EAAaxB,GAAKO,OAAQL,IAChD,GAA+B,IAA3BsB,EAAaxB,GAAKE,GAAY,CAChC,IAAMuB,EAAYvB,EAAMa,EAClBW,EAAY1B,EAAMgB,EACxB,GAAIU,EAAY,EACd,SAEF,IAAMC,EAAcf,EAAKc,GACzB,IAAIC,EAMF,OAAO,EAJP,QAA+BC,IAA3BD,EAAYF,IAAuD,IAA3BE,EAAYF,GACtD,OAAO,EAQjB,OAAO,GAIII,EAAiB,SAAChB,EAAOD,EAAMG,EAAGC,EAAGF,GAIhD,IAHA,IAAIgB,GAAe,EACbC,EAAQzB,EAAOO,GAAOC,GACtBkB,EAAO,YAAQpB,GACZZ,EAAM,EAAGA,EAAM+B,EAAMxB,OAAQP,IACpC,IAAK,IAAIE,EAAM,EAAGA,EAAM6B,EAAM/B,GAAKO,OAAQL,IAAO,CAChD,GAAI6B,EAAM/B,GAAKE,GAEEF,EAAMgB,EAGR,EACXc,GAAe,EAEfE,EAAQhC,EAAMgB,GAAGd,EAAMa,GAAKF,EAMpC,OADAoB,QAAQC,IAAR,0BAA+BJ,IACxB,CAAElB,KAAMoB,EAASX,SAAUS,IAIvBK,EAAY,SAACvB,GAGxB,IAFA,IACIwB,EAAgB,EACXpC,EAAM,EAAGA,EAAMY,EAAKL,OAAQP,KACL,IAA1BY,EAAKZ,GAAKqC,QAAQ,KACpBD,GAAiB,EACjBxB,EAAK0B,OAAOtC,EAAK,GACjBY,EAAK2B,QAAQC,MAAM,IAAIC,KAAK,KAGhC,MATe,CAAC,EAAG,GAAI,IAAK,IAAK,MASnBL,IAIH9B,EAAS,CAEpB,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,KAET,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,IAER,CAAC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,KAGT,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,IAER,CAAC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,IAER,CAAC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,IAER,CAAC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,KAGT,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,IAER,CAAC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,IAER,CAAC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,IAER,CAAC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,KAGT,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,IAER,CAAC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,IAER,CAAC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,IAER,CAAC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,KAGT,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,IAER,CAAC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,KAGT,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAA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","file":"static/js/main.05e25556.chunk.js","sourcesContent":["export const PAUSE      = \"PAUSE\"       // Pause the game\nexport const RESUME     = \"RESUME\"      // Resume a paused game\nexport const MOVE_LEFT  = \"MOVE_LEFT\"   // Move piece left\nexport const MOVE_RIGHT = \"MOVE_RIGHT\"  // Move piece right\nexport const ROTATE     = \"ROTATE\"      // Rotate piece\nexport const MOVE_DOWN  = \"MOVE_DOWN\"   // Move piece down\nexport const SET_NEXT   = \"SET_NEXT\"    // ???\nexport const GAME_OVER  = \"GAME_OVER\"   // The game is over\nexport const RESTART    = \"RESTART\"     // Restart Game\n\n\nexport const setNext = () => {\n  return { type: SET_NEXT }\n}\n\nexport const moveRight = () => {\n  return { type: MOVE_RIGHT }\n}\n\nexport const moveLeft = () => {\n  return { type: MOVE_LEFT }\n}\n\nexport const rotate = () => {\n  return { type: ROTATE }\n}\n\nexport const moveDown = () => {\n  return { type: MOVE_DOWN }\n}\n\nexport const pause = () => {\n  return { type: PAUSE }\n}\n\nexport const resume = () => {\n  return { type: RESUME }\n}\n\nexport const restart = () => {\n  return { type: RESTART }\n}\n","\n// Generates Random numbers in a range\nexport const random = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min\n}\n\n// Returns the default grid\nexport const gridDefault = () => {\n  const rows = 18\n  const cols = 10\n  const array = []\n  for (let row = 0; row < rows; row++) {\n    array.push([])\n    for (let col = 0; col < cols; col++) {\n      array[row].push(0)\n    }\n  }\n  return array\n}\n\n// Return a random shape\nexport const randomShape = () => {\n  return random(1, shapes.length - 1)\n}\n\n// Return the default state for the game\nexport const defaultState = () => {\n  return {\n    grid: gridDefault(),\n    shape: randomShape(),\n    rotation: 0,\n    x: 5,\n    y: -4,\n    nextShape: randomShape(),\n    isRunning: true,\n    score: 0,\n    speed: 1000,\n    gameOver: false\n  }\n}\n\n// Returns the next rotation for a shape\nexport const nextRotation = (shape, rotation) => {\n  return (rotation + 1) % shapes[shape].length\n}\n\nexport const canMoveTo = (shape, grid, x, y, rotation) => {\n  const currentShape = shapes[shape][rotation]\n  // Loop through all rows and cols of the **shape**\n  for (let row = 0; row < currentShape.length; row++) {         // Loop through rows\n    for (let col = 0; col < currentShape[row].length; col++) {  // Loop through cols\n      if (currentShape[row][col] !== 0) {                       // Look for a 1 here\n        const proposedX = col + x                               // x offset on grid\n        const proposedY = row + y                               // y offset on grid\n        if (proposedY < 0) {\n          continue\n        }\n        const possibleRow = grid[proposedY]                     // Get the row on the grid\n        if (possibleRow) {                                      // Check row exists\n          // Check this column in the row undefined and it's off the edges, 0 and it's empty\n          if (possibleRow[proposedX] === undefined || possibleRow[proposedX] !== 0) {                         // check the contents\n            return false // undefined or not 0 and it's occupied we can't move here.\n          }\n        } else {\n          return false\n        }\n      }\n    }\n  }\n  return true\n}\n\n// Adds current shape to grid\nexport const addBlockToGrid = (shape, grid, x, y, rotation) => {\n  let blockOffGrid = false\n  const block = shapes[shape][rotation]\n  const newGrid = [ ...grid ]\n  for (let row = 0; row < block.length; row++) {\n    for (let col = 0; col < block[row].length; col++) {\n      if (block[row][col]) {\n        // TODO: Find game over when block can't b placed.\n        const yIndex = row + y\n        // const xIndex = col + x\n\n        if (yIndex < 0) {\n          blockOffGrid = true\n        } else {\n          newGrid[row + y][col + x] = shape\n        }\n      }\n    }\n  }\n  console.log(`addBlockToGrid: ${blockOffGrid}`)\n  return { grid: newGrid, gameOver: blockOffGrid }\n}\n\n// Checks for completed rows and scores points\nexport const checkRows = (grid) => {\n  const points = [0, 40, 100, 300, 1200]\n  let completedRows = 0\n  for (let row = 0; row < grid.length; row++) {\n    if (grid[row].indexOf(0) === -1) {\n      completedRows += 1\n      grid.splice(row, 1)\n      grid.unshift(Array(10).fill(0))\n    }\n  }\n  return points[completedRows]\n}\n\n// Define block shapes and their rotations as arrays.\nexport const shapes = [\n  // none\n  [[[0,0,0,0],\n    [0,0,0,0],\n    [0,0,0,0],\n    [0,0,0,0]]],\n  // I\n  [[[0,0,0,0],\n    [1,1,1,1],\n    [0,0,0,0],\n    [0,0,0,0]],\n\n   [[0,1,0,0],\n    [0,1,0,0],\n    [0,1,0,0],\n    [0,1,0,0]]],\n\n  // T\n  [[[0,0,0,0],\n    [1,1,1,0],\n    [0,1,0,0],\n    [0,0,0,0]],\n\n   [[0,1,0,0],\n    [1,1,0,0],\n    [0,1,0,0],\n    [0,0,0,0]],\n\n   [[0,1,0,0],\n    [1,1,1,0],\n    [0,0,0,0],\n    [0,0,0,0]],\n\n   [[0,1,0,0],\n    [0,1,1,0],\n    [0,1,0,0],\n    [0,0,0,0]]],\n\n  // L\n  [[[0,0,0,0],\n    [1,1,1,0],\n    [1,0,0,0],\n    [0,0,0,0]],\n\n   [[1,1,0,0],\n    [0,1,0,0],\n    [0,1,0,0],\n    [0,0,0,0]],\n\n   [[0,0,1,0],\n    [1,1,1,0],\n    [0,0,0,0],\n    [0,0,0,0]],\n\n   [[0,1,0,0],\n    [0,1,0,0],\n    [0,1,1,0],\n    [0,0,0,0]]],\n\n  // J\n  [[[1,0,0,0],\n    [1,1,1,0],\n    [0,0,0,0],\n    [0,0,0,0]],\n\n   [[0,1,1,0],\n    [0,1,0,0],\n    [0,1,0,0],\n    [0,0,0,0]],\n\n   [[0,0,0,0],\n    [1,1,1,0],\n    [0,0,1,0],\n    [0,0,0,0]],\n\n   [[0,1,0,0],\n    [0,1,0,0],\n    [1,1,0,0],\n    [0,0,0,0]]],\n\n  // Z\n  [[[0,0,0,0],\n    [1,1,0,0],\n    [0,1,1,0],\n    [0,0,0,0]],\n\n   [[0,0,1,0],\n    [0,1,1,0],\n    [0,1,0,0],\n    [0,0,0,0]]],\n\n  // S\n  [[[0,0,0,0],\n    [0,1,1,0],\n    [1,1,0,0],\n    [0,0,0,0]],\n\n   [[0,1,0,0],\n    [0,1,1,0],\n    [0,0,1,0],\n    [0,0,0,0]]],\n\n  // O\n  [[[0,1,1,0],\n    [0,1,1,0],\n    [0,0,0,0],\n    [0,0,0,0]]]\n]\n","import {\n  MOVE_RIGHT, MOVE_LEFT, MOVE_DOWN, ROTATE,\n  PAUSE, RESUME, RESTART, GAME_OVER\n} from '../actions'\n\nimport {\n  defaultState,\n  nextRotation,\n  canMoveTo,\n  addBlockToGrid,\n  randomShape,\n  checkRows } from '../utils'\n\nconst gameReducer = (state = defaultState(), action) => {\n  const { shape, grid, x, y, rotation, nextShape, score, isRunning } = state\n\n  switch(action.type) {\n    case ROTATE:\n      const newRotation = nextRotation(shape, rotation)\n      if (canMoveTo(shape, grid, x, y, newRotation)) {\n          return { ...state, rotation: newRotation }\n      }\n      return state\n\n    case MOVE_RIGHT:\n      if (canMoveTo(shape, grid, x + 1, y, rotation)) {\n        return { ...state, x: x + 1 }\n      }\n      return state\n\n    case MOVE_LEFT:\n      if (canMoveTo(shape, grid, x - 1, y, rotation)) {\n          return { ...state, x: x - 1 }\n      }\n      return state\n\n    case MOVE_DOWN:\n      // Get the next potential Y position\n      const maybeY = y + 1\n\n      // Check if the current block can move here\n      if (canMoveTo(shape, grid, x, maybeY, rotation)) {\n          // If so move\n          return { ...state, y: maybeY }\n      }\n\n      // If not place the block\n      // (this returns an object with a grid and gameover bool)\n      const obj = addBlockToGrid(shape, grid, x, y, rotation)\n      const newGrid = obj.grid\n      const gameOver = obj.gameOver\n\n      if (gameOver) {\n        // Game Over\n        const newState = { ...state }\n        newState.shape = 0\n        newState.grid = newGrid\n        return { ...state, gameOver: true }\n      }\n\n      // reset somethings to start a new shape/block\n      const newState = defaultState()\n      newState.grid = newGrid\n      newState.shape = nextShape\n      newState.nextShape = randomShape()\n      newState.score = score\n      newState.isRunning = isRunning\n      console.log(state)\n      console.log(newState)\n\n\n      // TODO: Check and Set level\n      // Score increases decrease interval\n      // It's important that only a copy of the be passed into checkRows!\n      newState.score = score + checkRows(newGrid)\n\n      return newState\n\n    case RESUME:\n\n      return { ...state, isRunning: true }\n\n    case PAUSE:\n\n      return { ...state, isRunning: false }\n\n    case GAME_OVER:\n\n      return state\n\n    case RESTART:\n\n      return defaultState()\n\n    default:\n      return state\n  }\n}\n\nexport default gameReducer\n","import { combineReducers } from 'redux'\nimport gameReducer from './game-reducer'\n\nconst reducers = combineReducers({\n  game: gameReducer\n})\n\nexport default reducers\n","import React, { Component } from 'react'\n\n// Represents a grid square with a color\n\nclass GridSquare extends Component {\n\n  render () {\n    const classes = `grid-square color-${this.props.color}`\n    return <div className={classes} />\n  }\n}\n\nexport default GridSquare\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\nimport GridSquare from './grid-square'\n\nimport { moveDown } from '../actions'\nimport { shapes } from '../utils'\n\n// Represents a 10 x 18 grid of grid squares\n\nclass GridBoard extends Component {\n\n  constructor(props) {\n    super(props)\n\n    this.lastUpdateTime = 0\n    this.progressTime = 0\n  }\n\n  componentDidMount() {\n    window.requestAnimationFrame(this.update.bind(this))\n  }\n\n  // Handle game updates\n  update(time) {\n    window.requestAnimationFrame(this.update.bind(this))\n    if (!this.props.isRunning) {\n      return\n    }\n\n    if (!this.lastUpdateTime) {\n      this.lastUpdateTime = time\n    }\n\n    const deltaTime = time - this.lastUpdateTime\n    this.progressTime += deltaTime\n    if (this.progressTime > this.props.speed) {\n      this.props.moveDown()\n      this.progressTime = 0\n    }\n\n    this.lastUpdateTime = time\n  }\n\n  makeGrid() {\n    const { grid, shape, rotation, x, y } = this.props\n    const block = shapes[shape][rotation]\n    const blockColor = shape\n    // map rows\n    return grid.map((rowArray, row) => {\n      // map columns\n      return rowArray.map((square, col) => {\n        const blockX = col - x\n        const blockY = row - y\n        let color = square\n        // Map current falling block to grid\n        if (blockX >= 0 && blockX < block.length && blockY >= 0 && blockY < block.length) {\n          color = block[blockY][blockX] === 0 ? color : blockColor\n        }\n        // Generate a unique key for every block\n        const k = row * grid[0].length + col;\n        // Generate a grid square\n        return <GridSquare\n                key={k}\n                square={square}\n                color={color}>\n                {square}\n              </GridSquare>\n      })\n    })\n  }\n\n  render () {\n    return (\n      <div className='grid-board'>\n        {this.makeGrid()}\n      </div>\n    )\n  }\n}\n\n// Map state to props\nconst mapStateToProps = (state) => {\n  return {\n    grid: state.game.grid,\n    shape: state.game.shape,\n    rotation: state.game.rotation,\n    x: state.game.x,\n    y: state.game.y,\n    speed: state.game.speed,\n    isRunning: state.game.isRunning\n  }\n}\n\n// Map Dipatch to Props\nconst mapDispatchToProps = () => {\n  return {\n    moveDown\n  }\n}\n\n// Connect the component\nexport default connect(mapStateToProps, mapDispatchToProps())(GridBoard)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\nimport GridSquare from './grid-square'\n\nimport { shapes } from '../utils'\n\n// Draws the \"next\" block view showing the next block to drop\n\nclass NextBlock extends Component {\n\n  makeGrid() {\n    const { shape } = this.props    // deconstruct shape\n    const block = shapes[shape][0]  // get the array for this shape first rotation\n    const box = shapes[0][0]        // get the empty shape\n\n    // Map the block to the grid\n    return box.map((rowArray, row) => {\n      return rowArray.map((square, col) => {\n        const color = block[row][col] === 0 ? 0 : shape // If there is a 1 use the shape index\n        return <GridSquare key={`${row}${col}`} color={color} />\n      })\n    })\n  }\n\n  render () {\n\n    return (\n      <div className=\"next-block\">\n        {this.makeGrid()}\n      </div>\n    )\n  }\n}\n\n// Map State to props\nconst mapStateToProps = (state) => {\n  return {\n    // Return nextShape as shape\n    shape: state.game.nextShape\n  }\n}\n\n// Conect this component\nexport default connect(mapStateToProps)(NextBlock)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\nimport { pause, resume, restart } from '../actions'\n\n\nclass ScoreBoard extends Component {\n\n  render() {\n    const { isRunning, score, resume, pause, restart, gameOver } = this.props\n\n    return (\n      <div className=\"score-board\">\n        <div>Score:{ score }</div>\n        <div>Level: 1</div>\n\n        <button className=\"score-board-button\" onClick={(e) => {\n          if (gameOver) { return }\n          isRunning ? pause() : resume()\n        }}>{isRunning ? \"Pause\" : \"Resume\"}</button>\n\n\n        <button className=\"score-board-button\" onClick={(e) => {\n          restart()\n        }}>Restart</button>\n\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    score: state.game.score,\n    isRunning: state.game.isRunning,\n    gameOver: state.game.gameOver\n  }\n}\n\nconst mapDispatchToProps = () => {\n  return {\n    pause,\n    resume,\n    restart\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps())(ScoreBoard)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { moveDown, moveLeft, moveRight, rotate } from '../actions'\n\nclass Controls extends Component {\n\n  render() {\n    const { isRunning, gameOver } = this.props\n\n    return (\n      <div className=\"controls\">\n        {/* left */}\n        <button className=\"control-button\" onClick={(e) => {\n          console.log(isRunning, gameOver)\n          if (!isRunning || gameOver) { return }\n          this.props.moveLeft()\n        }}>Left</button>\n\n        {/* right */}\n        <button className=\"control-button\" onClick={(e) => {\n          if (!isRunning || gameOver) { return }\n          this.props.moveRight()\n        }}>Right</button>\n\n        {/* rotate */}\n        <button className=\"control-button\" onClick={(e) => {\n          if (!isRunning || gameOver) { return }\n          this.props.rotate()\n        }}>Rotate</button>\n\n        {/* down */}\n        <button className=\"control-button\" onClick={(e) => {\n          if (!isRunning || gameOver) { return }\n          this.props.moveDown()\n        }}>Down</button>\n\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    isRunning: state.game.isRunning,\n    gameOver: state.game.gameOver\n  }\n}\n\nconst mapDispatchToProps = () => {\n  return {\n    moveRight,\n    moveLeft,\n    moveDown,\n    rotate\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps())(Controls)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\nimport { restart } from '../actions'\n\n// Displays a message\n\nclass MessagePopup extends Component {\n\n  render() {\n    const { gameOver, isRunning } = this.props\n    let message = ''\n    let isHidden = 'hidden'\n\n    console.log('Message Popup')\n    console.log(gameOver, isRunning)\n\n    if (gameOver) {\n      message = 'Game Over'\n      isHidden = ''\n    } else if (!isRunning) {\n      message = 'Paused'\n      isHidden = ''\n    } else {\n      message = '???'\n    }\n\n    return (\n      <div className={`message-popup ${isHidden}`}>\n        <h1>{message}</h1>\n        <p></p>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    gameOver: state.game.gameOver,\n    isRunning: state.game.isRunning\n  }\n}\n\nconst mapDispatchToProps = () => {\n  return {\n    restart\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps())(MessagePopup)\n","import React, { Component } from 'react';\nimport { createStore } from 'redux'\nimport { Provider } from 'react-redux'\n\nimport reducers from './reducers'\n\nimport GridBoard from './components/grid-board'\nimport NextBlock from './components/next-block'\nimport ScoreBoard from './components/score-board'\nimport Controls from './components/controls'\nimport MessagePopup from './components/message-popup'\n\nimport './App.css';\n\nconst store = createStore(reducers)\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <h1 className=\"App-title\">Tetris Redux</h1>\n          </header>\n          <GridBoard />\n          <NextBlock />\n          <ScoreBoard />\n          <Controls />\n          <MessagePopup />\n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n\n// Testing with\n// https://blog.bitsrc.io/testing-your-react-app-with-puppeteer-and-jest-c72b3dfcde59\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}